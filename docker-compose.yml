services:
    app:
        container_name: api
        env_file: .env
        build:
            context: .
            target: dev
            dockerfile: Dockerfile
        ports:
            - '3000:${PORT}'
        expose:
            - '3000'
        tty: true
        volumes:
            - ./:/app
        links:
            - database
        depends_on:
            database:
                condition: service_healthy
        networks:
            - appnetwork
        restart: always

    database:
        image: 'postgres:17beta2-bookworm'
        container_name: db
        env_file: '.env'
        environment:
            POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD}
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
        ports:
            - 5432:5432
        expose:
            - '5432'
        volumes:
            - 'db_data:/var/lib/postgresql/data'
        restart: on-failure
        healthcheck:
            test:
                [
                    'CMD',
                    'pg_isready',
                    '-q',
                    '-d',
                    '${DB_NAME}',
                    '-U',
                    '${DB_USER}',
                ]
            interval: 5s
            timeout: 3s
            retries: 3
        networks:
            - appnetwork

    migrate:
        image: migrate/migrate:latest
        profiles: ['tools']
        volumes:
            - ./db/migrations:/migrations
        entrypoint:
            [
                'migrate',
                '-path',
                '/migrations',
                '-database',
                'postgres://${DB_USER}:${DB_ROOT_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable',
                '-verbose',
            ]
        # command: ["up"]
        networks:
            - appnetwork
        depends_on:
            database:
                condition: service_healthy
        restart: on-failure

volumes:
    db_data:

networks:
    appnetwork:
