package api

import (
	"errors"
	"log"
	"os"

	"github.com/go-chi/chi/v5"
	chiMiddleware "github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/docgen"

	"github.com/AxelTahmid/golang-starter/api/middlewares"
	"github.com/AxelTahmid/golang-starter/domain/auth"
)

func (s *Server) routes() {
	// global middlewares
	s.router.Use(chiMiddleware.RealIP)
	s.router.Use(chiMiddleware.RequestID)
	s.router.Use(middlewares.Logger(s.log))
	s.router.Use(middlewares.Recovery)
	s.router.Use(middlewares.Secure(s.conf.Secure).Handler)
	s.router.Use(middlewares.Json)
	s.router.Use(chiMiddleware.Heartbeat("/ping"))

	// routes
	s.router.Route("/api/v1", func(r chi.Router) {
		r.Mount("/auth", auth.Routes(s.db))
	})
}

func (s *Server) generateRouteDocs() {
	// Remove any existing `routes.md` file in the project directory.
	if err := os.Remove("routes.md"); err != nil && !errors.Is(err, os.ErrNotExist) {
		log.Fatal(err)
	}

	// Create a new `routes.md` file.
	f, err := os.Create("routes.md")

	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	text := docgen.MarkdownRoutesDoc(s.router, docgen.MarkdownOpts{ // Here, `r` is the main router.
		ProjectPath:        "github.com/AxelTahmid/golang-starter",
		Intro:              "Welcome to the documentation for the RESTful API.",
		ForceRelativeLinks: true, // Without this, you will not see any links to the source code in the Markdown file on your local machine.
		URLMap: map[string]string{
			"github.com/AxelTahmid/golang-starter/vendor/github.com/go-chi/chi/v5/": "https://github.com/go-chi/chi/blob/master/",
		},
	})

	// Write the Markdown generated by `docgen` to the `routes.md` file.
	if _, err = f.Write([]byte(text)); err != nil {
		log.Fatal(err)
	}
}
